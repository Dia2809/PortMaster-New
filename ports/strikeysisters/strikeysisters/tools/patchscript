#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patchlog_error.txt"
START_TIME=$(date +%s)

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    $ESUDO umount "$DOTNETDIR"
    $ESUDO umount "$TOOLKIT"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$RUNTIME" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Mount the dotnet runtime
DOTNETDIR="$HOME/mono"
DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
if [ -f "$DOTNETFILE" ]; then
    $ESUDO mkdir -p "$DOTNETDIR"
    $ESUDO umount "$DOTNETFILE" || true
    $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
else
    echo "This port requires the Dotnet runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$controlfolder:$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

prepare_files() {
	# Create the savedir
	mkdir -p $SAVEDIR
	
	# Delete files we don't need
	[ -d "$DATADIR/docs" ] && rm -rf "$DATADIR/docs"
	rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/.gitkeep
	
	sleep 1
}

apply_xdelta() {
# If "$DATADIR/game.unx" exists and matches the checksum of the GOG or Steam versions
    if [ -f "$DATADIR/game.unx" ]; then
        checksum=$(md5sum "$DATADIR/game.unx" | awk '{print $1}')
    
        # Checksum for the Itch version
        if [ "$checksum" = "61c71e2b7c05d6742fcc2c4144320faf" ]; then
            output=$(xdelta3 -d -s "$DATADIR/game.unx" -f "./tools/patch/game.itch.xdelta" "$DATADIR/game2.unx" 2>&1) && \
            rm $DATADIR/game.unx
            echo "Itch.io game.unx has been patched"
        # Checksum for the Steam version
        elif [ "$checksum" = "8a21041475e86848c3b4d57f0e05de35" ]; then
            output=$(xdelta3 -d -s "$DATADIR/game.unx" -f "./tools/patch/game.steam.xdelta" "$DATADIR/game2.unx" 2>&1) && \
            rm $DATADIR/game.unx
 	        echo "Steam game.unx has been patched"
        else
            echo "Error: MD5 checksum of game.unx does not match any expected version."
			exit 1
        fi
    else    
        echo "Missing game.unx in $DATADIR folder or game has been patched."
    fi
	
	# If "$DATADIR/audiogroup1.dat" exists and matches the checksum of the Itch.io version
    if [ -f "$DATADIR/audiogroup1.dat" ]; then
        checksum=$(md5sum "$DATADIR/audiogroup1.dat" | awk '{print $1}')
    
        # Checksum for the Itch.io audiogroup1.dat version
        if [ "$checksum" = "8322bd3419c66663bbb01c70458c8dc8" ]; then
            output=$(xdelta3 -d -s "$DATADIR/audiogroup1.dat" -f "./tools/patch/audiogroup1.itch.xdelta" "$DATADIR/audiogroup1patched.dat" 2>&1) && \
            rm $DATADIR/audiogroup1.dat
            mv $DATADIR/audiogroup1patched.dat $DATADIR/audiogroup1.dat
            echo "Itch.io audiogroup1.dat has been patched."
        fi
    else    
        echo "Missing audiogroup1.dat in $DATADIR folder or Steam files detected."
    fi
	
	# If "$DATADIR/audiogroup2.dat" exists and matches the checksum of the Itch.io version
    if [ -f "$DATADIR/audiogroup2.dat" ]; then
        checksum=$(md5sum "$DATADIR/audiogroup2.dat" | awk '{print $1}')
    
        # Checksum for the Itch.io audiogroup2.dat version
        if [ "$checksum" = "c8a3f873450cfdad394793bd3f99158d" ]; then
            output=$(xdelta3 -d -s "$DATADIR/audiogroup2.dat" -f "./tools/patch/audiogroup2.itch.xdelta" "$DATADIR/audiogroup2patched.dat" 2>&1) && \
            rm $DATADIR/audiogroup2.dat
            mv $DATADIR/audiogroup2patched.dat $DATADIR/audiogroup2.dat
            echo "Itch.io audiogroup2.dat has been patched."
        fi
    else    
        echo "Missing audiogroup2.dat in $DATADIR folder or Steam files detected."
    fi
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/game2.unx" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Texture dumping failed to apply."
        patch_failure
    else
        rm -f "$DATADIR/game2.unx"
        mv "$DATADIR/textures" "$SAVEDIR/textures"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
	
	sleep 1
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for game.droid."
        rmdir "$TMPDIR"
        patch_failure
    fi
	
	sleep 1
	
	# Find and compress all .ogg files in the /gamedata directory
    find "$DATADIR" -type f -name "*.ogg" | while read -r file; do
        # Create a temporary file for the compressed version
        temp_file="${file%.ogg}_temp.ogg"
    
        # Decode the .ogg file and encode it with the specified bitrate
        if "$TOOLKIT/gmtools/oggdec" -o - "$file" 2>/dev/null | "$TOOLKIT/gmtools/oggenc" -b 64 -o "$temp_file" - 2>/dev/null; then
            # Replace the original file with the compressed version if successful
            mv "$temp_file" "$file"
            echo "Compressed: $file to 64 kbps"
        else
            echo "Failed to compress: $file" >&2
            rm -f "$temp_file" # Clean up the temp file in case of error
        fi
    done

    echo "All .ogg files have been processed (if any)."
	
	sleep 1
}

zip_archive() {
        zip -r -0 "$DATAFILE" ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf "$GAMEDIR/assets/"*
		
		sleep 1
}

# Create install completion flag
install_complete() {
	touch "install_completed"
    # Measure time to complete
	END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "Script completed in $DURATION seconds"
	echo "Installation completed successfully!"
	echo "-----------------------------"
	echo "Process finished at: $(date)"
}

process_game() { 
    echo "Preparing game..."
    prepare_files || patch_failure
	echo "Patching game.unx..."
	apply_xdelta || patch_failure
    echo "Externalizing textures..."
    dump_textures || patch_failure
	echo "Finishing up..."
    zip_archive || patch_failure
    install_complete
	sleep 1
	
    # Unmount runtimes
    $ESUDO umount "$DOTNETDIR"
    $ESUDO umount "$TOOLKIT"
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game