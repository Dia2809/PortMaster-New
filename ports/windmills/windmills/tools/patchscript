#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    $ESUDO umount "$TOOLKIT"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="windmills.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

prepare_files() {
    mkdir -p "$SAVEDIR"
    
    # Delete excess files
    find "$DATADIR" -type f \( \
        -name "*.exe" -o -name "*.dll" -o -name "*.hashdb" -o \
        -name "*.ico" -o -name "*.lnk" -o -name "*.msg" -o -name "*.zip" \
    \) -exec rm -f {} \;
    
}

# Apply a patch
apply_patch() {
	if [ -f "assets/data.win" ]; then
		# get data.win checksum
		checksum=$(md5sum "assets/data.win" | awk '{ print $1 }')
		
		# Determine patch files based on RAM
		if [[ "$DEVICE_RAM" -gt 5 ]] && [ -f "$GAMEDIR/assets/data.win" ]; then
			demopatch="tools/patchdemo-he.xdelta"
			fullpatch="tools/patch-he.xdelta"
		else
			demopatch="tools/patchdemo.xdelta"
			fullpatch="tools/patch.xdelta"
		fi
		
		# Check for Demo version
		if [ "$checksum" == "5be6b9e4c51bfdcb140546644eba6fbf" ]; then
			# Apply Demo version patch
			$controlfolder/xdelta3 -d -s "assets/data.win" "$demopatch" "assets/game.droid"
			echo "Data.win from Demo version has been patched"
		# Check for Full version
		elif [ "$checksum" == "81a26f93195ff277459dace1febb0f0c" ]; then
			# Apply Full version patch
			$controlfolder/xdelta3 -d -s "assets/data.win" "$fullpatch" "assets/game.droid"
			echo "Data.win from Full version has been patched"
		else
			echo "checksum does not match; wrong build/version of game"
		fi
	else
		echo "Missing file in assets folder or game has been patched."
	fi
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -v -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
		rm -f assets/data.win
        zip -r -0 "$DATAFILE" ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf "$DATADIR"*
}

process_game() { 
    echo "Preparing game..."
    prepare_files || patch_failure 
	echo "Applying a patch..."
    apply_patch || patch_failure 
    echo "Compressing audio..."
    compress_audio || patch_failure
    sleep 1
    echo "Finishing up..."
    zip_archive || patch_failure
    sleep 1
    
    # Unmount runtimes
    $ESUDO umount "$TOOLKIT"
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
