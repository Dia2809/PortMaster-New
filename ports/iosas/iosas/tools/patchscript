#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="patchlog.txt"
LOGERR="patcherr.txt"

# Redirect output and error to the log file
> "$GAMEDIR/$LOGFILE" && exec > >(tee "$GAMEDIR/$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    # Exit script, or return if sourced
    return 1 2>/dev/null || exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" 2>/dev/null || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Mount the dotnet runtime
DOTNETDIR="$HOME/mono"
DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
if [ -f "$DOTNETFILE" ]; then
    $ESUDO mkdir -p "$DOTNETDIR"
    $ESUDO umount "$DOTNETDIR" 2>/dev/null || true
    $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
else
    echo "This port requires the Dotnet runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="iosas.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(command -v python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(command -v zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

cpu_check() {
    
    CONFIG="$SAVEDIR/config.ini"

    # Check for pm-config.ini, rename if found
    if [ -f "$SAVEDIR/pm-config.ini" ]; then
        mv "$SAVEDIR/pm-config.ini" "$CONFIG"
        echo "Renamed old config ini file to match new version."
    fi
    
    # Check for config.ini, log if not found
    if [ ! -f "$CONFIG" ]; then
        echo "Error: Configuration file ($CONFIG) not found!"
        return 1
    fi

    case "$DEVICE_CPU" in
        # CPUs with less than 1.5 GHz
        "a133plus"|"h700"|"RK3326")
            # Set frameskip and turn IdolSFX off for CPUs with less than 1.5 GHz
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        # CPUs with 2 GHz or more
        "SD865"|"RK3388"|"RK3566"|"RK3399"|"S922X"|"x86_64")
            # Set frameskip to 0 (no frameskip) and leave IdolSFX on for CPUs with 2 GHz or more
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=0/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=1/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
        
        *)
            # Default case: set frameskip and turn IdolSFX off for other CPUs
            if ! sed -i 's/^FrameSkip=[0-9]\+$/FrameSkip=20/' "$CONFIG"; then
                echo "Error: Failed to update FrameSkip in $CONFIG"
            fi
            if ! sed -i 's/^IdolSFX=[0-9]\+$/IdolSFX=0/' "$CONFIG"; then
                echo "Error: Failed to update IdolSFX in $CONFIG"
            fi
            ;;
    esac
}

# Dump game code entries from data.win
dump_code() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*

    # Specify which code entries to extract
    CODE_ENTRIES=(
        "gml_Object_code_game_init_Create_0"
        "gml_Object_obj_god_gem_slot_controller_Draw_0"
        "gml_GlobalScript_localization_functions"
    )

    CODEARGS=""
    for entry in "${CODE_ENTRIES[@]}"; do
        CODEARGS="$CODEARGS --code $entry"
    done

    echo "Dumping GML scripts: ${CODE_ENTRIES[*]}"

    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -o "$TMPDIR" \
        $CODEARGS

    if [ $? -ne 0 ]; then
        echo "Failed to dump GML scripts."
        return 1
    fi

    echo "GML scripts dumped to $TMPDIR"
}

modify_code() {
    # Modify the extracted gml
    $PYTHON "$GAMEDIR/tools/mod.py" "$TMPDIR/CodeEntries"
    if [ $? -ne 0 ]; then
        echo "Failed to modify GML scripts."
        return 1
    fi
}

# Replace game code entries for data.win
replace_code() {
    # Build --code args from all gml files
    CODEARGS=""
    for file in "$TMPDIR/CodeEntries/"*.gml; do
        [ -f "$file" ] || continue
        entry=$(basename "$file" .gml)
        echo "Will replace gml script: $file"
        CODEARGS="$CODEARGS --code $entry=$file"
    done

    # Begin replace operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        replace "$DATADIR/data.win" \
        -o "$DATADIR/data2.win" \
        $CODEARGS

    if [ $? -ne 0 ]; then
        echo "Failed to replace gml scripts."
        return 1
    else
        echo "Successfully replaced gml scripts."
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/data2.win" "$DATADIR/data.win"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Texture dumping failed to apply."
        return 1
    else
        rm -f "$DATADIR/data.win"
        mv "$DATADIR/textures" "$SAVEDIR/textures"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

compress_audio() {
    # Test for data.win
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    fi
    
    # Do audio compression
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        return 1
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        rm -rf $DATADIR/*
        mkdir -p saves
}

# Set zram swap file for Arkos
ZRAM_ENABLED=false
if [[ $CFW_NAME == *"ArkOS"* ]]; then
	TARGET_SIZE=$((300 * 1024 * 1024))  # bytes
	# Helper: current zram size in bytes (0 if none)
	get_current_size() {
		if [ -b /dev/zram0 ]; then
			$ESUDO zramctl --output NAME,SIZE --noheadings /dev/zram0 2>/dev/null \
			| awk '{print $2}'
		else
			echo 0
		fi
	}
	
	current_size=$(get_current_size)
	if [ "$current_size" -ge "$TARGET_SIZE" ] 2>/dev/null; then
		echo "zram0 swap already >= 300MB ($current_size bytes), nothing to do."
	else
		# If it exists but too small, tear it down first
		if [ "$current_size" -gt 0 ] 2>/dev/null; then
			echo "zram0 swap too small ($current_size bytes), recreating..."
			$ESUDO swapoff /dev/zram0 2>/dev/null || true
			$ESUDO zramctl --reset /dev/zram0 2>/dev/null || true
		fi
		
		echo "Creating zram0 swap at 300MB..."
		$ESUDO zramctl --find --size "$TARGET_SIZE" || {
			echo "Failed to create zram device"
			exit 1
		}
		
		$ESUDO mkswap /dev/zram0 >/dev/null
		$ESUDO swapon /dev/zram0
		ZRAM_ENABLED=true
	fi
fi

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    cpu_check
    dump_code || { patch_failure; return 1; }
    echo "Modifying gml scripts..."
    modify_code || { patch_failure; return 1; }
    echo "Repacking gml scripts..."
    replace_code || { patch_failure; return 1; }
    echo "Externalizing textures..."
    dump_textures || { patch_failure; return 1; }
    sleep 1
    echo "Compressing audio..."
    compress_audio || { patch_failure; return 1; }
    sleep 1
    echo "Finishing up..."
    zip_archive || { patch_failure; return 1; }
}


# Call the function
if ! process_game; then
    echo "Patching process failed!"
    mv "$LOGFILE" "$LOGERR"
else
    echo "Patching process complete!"
fi

# Unmount runtimes
$ESUDO umount "$TOOLKIT" 2>/dev/null || true
$ESUDO umount "$DOTNETDIR" 2>/dev/null || true

# Cleanup: disable zram if we enabled it
if [ "$ZRAM_ENABLED" = true ]; then
	$ESUDO swapoff /dev/zram0 2>/dev/null || true
fi